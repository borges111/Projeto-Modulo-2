KATA JS Tirar comentários 1-Complete a solução para que ela retire todo o texto que segue qualquer um de um conjunto de marcadores de comentários passados. Qualquer espaço em branco no final da linha também deve ser removido.

Exemplo:

Dada uma string de entrada de:

apples, pears # and bananas
grapes
bananas !apples

A saída esperada seria:

apples, pears
grapes
bananas

O código seria chamado assim:

var result = solution("apples, pears # and bananas\ngrapes\nbananas !apples", ["#", "!"])
// result should == "apples, pears\ngrapes\nbananas"

function solution(input, markers) {
  
};

SOLUÇÃO
function solution(input, markers){
  var comments = input.split('\n');
  for (var i in markers) {
    for (var j in comments) {
      var line = null;
      var idx = comments[j].indexOf(markers[i]);
      if (idx >= 0) {
        comments[j] = comments[j].substring(0, idx).trim();
      } 
    }
  }
  return comments.join('\n');
}


KATA JS Incrementador de string 2 - Seu trabalho é escrever uma função que incrementa uma string, para criar uma nova string.

Se a string já terminar com um número, o número deve ser incrementado em 1.
Se a string não terminar com um número. o número 1 deve ser anexado à nova string.
Exemplos:

foo -> foo1

foobar23 -> foobar24

foo0042 -> foo0043

foo9 -> foo10

foo099 -> foo100

Atenção: Se o número tiver zeros à esquerda a quantidade de dígitos deve ser considerada.

function incrementString (strng) {
  // return incrementedString
}

SOLUÇÃO
function incrementString(str) {
  const body = str.slice(0, -1);
  const lastDigit = str.slice(-1).match(/[0-9]/);
  return lastDigit === null
    ? str + "1"
    : lastDigit != 9
    ? body + (+lastDigit + 1)
    : incrementString(body) + "0";
}

KATA JS Contagem de bits 3 - Escreva uma função que receba um inteiro como entrada e retorne o número de bits que são iguais a um na representação binária desse número. Você pode garantir que a entrada não seja negativa.

Exemplo : A representação binária de 1234é 10011010010, então a função deve retornar 5neste caso

var countBits = function(n) {
  // Program Me
};


SOLUÇÃO
var countBits = function (n) {
    if (n) {
        return n.toString(2).match(/1/g).length
    }
    return 0;
};


KATA JS Uns e Zeros 4 - Dada uma matriz de uns e zeros, converta o valor binário equivalente em um inteiro.

Ex: [0, 0, 0, 1]é tratado como 0001qual é a representação binária de 1.

Exemplos:
Testing: [0, 0, 0, 1] ==> 1
Testing: [0, 0, 1, 0] ==> 2
Testing: [0, 1, 0, 1] ==> 5
Testing: [1, 0, 0, 1] ==> 9
Testing: [0, 0, 1, 0] ==> 2
Testing: [0, 1, 1, 0] ==> 6
Testing: [1, 1, 1, 1] ==> 15
Testing: [1, 0, 1, 1] ==> 11
No entanto, os arrays podem ter comprimentos variados, não apenas limitados a 4.

const binaryArrayToNumber = arr => {
  // your code
};

SOLUÇÃO
const binaryArrayToNumber = arr => 
  parseInt(arr.join(''),2)

KATA JS Sequência de Tribonacci 5 - Bem conhecido com o irmão maior de Fibonacci, também conhecido como Tribonacci.

Como o nome já pode revelar, ele funciona basicamente como um Fibonacci, mas somando os 3 últimos (ao invés de 2) números da sequência para gerar o próximo. E, pior parte, infelizmente não vou conseguir ouvir falantes de italiano não nativos tentando pronunciá-lo :(

Então, se formos iniciar nossa sequência Tribonacci como entrada inicial ( assinatura[1, 1, 1] AKA ), temos esta sequência:
[1, 1 ,1, 3, 5, 9, 17, 31, ...]

Mas e se começarmos com [0, 0, 1]uma assinatura? Como começar com [0, 1], em vez de [1, 1]basicamente deslocar a sequência de Fibonacci comum uma 
vez, você pode ficar tentado a pensar que teríamos a mesma sequência deslocada em 2 casas, mas esse não é o caso e obteríamos:
[0, 0, 1, 1, 2, 4, 7, 13, 24, ...]

Bem, você deve ter adivinhado até agora, mas para ser claro: você precisa criar uma função fibonacci que, dada uma matriz/lista de assinatura , retorne os primeiros n elementos - assinatura incluída da sequência semeada.

A assinatura sempre conterá 3 números; n será sempre um número não negativo; if n == 0, então retorne um array vazio (exceto em C return NULL) e esteja pronto para qualquer outra coisa que não esteja claramente especificada;)

Se você gostou deste kata, a versão mais avançada e generalizada dele pode ser encontrada no kata Xbonacci

[Agradecimentos pessoais ao professor Jim Fowler no Coursera por suas aulas incríveis que eu realmente recomendo a qualquer entusiasta de matemática e por me mostrar essa curiosidade matemática também com sua paixão contagiante de sempre :)]

function tribonacci(signature,n){
  //your code here
}

SOLUÇÃO

function tribonacci(signature, n) {
for(let i = 0; i < n -3; i++) {
signature.push(signature.slice(i) .reduce(( a , b) => a + b),);
}
return signature.slice(0, n);
}


KATA JS Sequências divididas 6 - Complete a solução para que ela divida a string em pares de dois caracteres. Se a string contiver um número ímpar de caracteres, ela deverá substituir o segundo caractere ausente do par final por um sublinhado ('_').

Exemplos:

* 'abc' =>  ['ab', 'c_']
* 'abcdef' => ['ab', 'cd', 'ef']


function solution(str){
   
}

SOLUÇÃO
function solution(str) {
    let i = 0
    let result = []
    if (str.length % 2 !== 0) {
        str += "_"
    }
    while (i < str.length) {
        result.push(str[i] + str[i + 1])
        i += 2
    }
    return result
}

KATA JS Você consegue o laço? 7 -
 Você recebe um nó que é o início de uma lista vinculada. Esta lista contém uma peça pendente e um laço. Seu objetivo é determinar o comprimento do loop.

Por exemplo, na imagem a seguir, o tamanho da peça pendente é 3 e o tamanho do laço é 12:


// Use the `getNext' method or 'next' property to get the following node.
node.getNext()
node.next


Notas:

NÃO altere os nós!
em alguns casos pode haver apenas um laço, sem nenhuma peça pendurada
Graças a shadchnev, quebrei todos os métodos da classe Hash.

Não perca o artigo de dmitry na discussão depois de passar no Kata !!

function loop_size(node){

}

SOLUÇÃO
function loop_size(node) {
    var loopArr = [];
    while (node && loopArr.indexOf(node) < 0) {
      loopArr.push(node);
      node = node.next;
    }
    var firstIndex = Math.max(0, loopArr.indexOf(node));
    return loopArr.length - firstIndex;
  }